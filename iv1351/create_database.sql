/* PERSON and Multi-Valued Attributes */
CREATE TABLE PERSON (
    PersonID SERIAL PRIMARY KEY,
    PersonNumber VARCHAR(50) UNIQUE,
    FirstName VARCHAR(100) NOT NULL,
    LastName VARCHAR(100) NOT NULL,
    Address VARCHAR(255) NOT NULL
);

CREATE TABLE PHONE (
    PhoneID SERIAL PRIMARY KEY,
    PhoneNumber VARCHAR(15) UNIQUE
);

CREATE TABLE PERSON_PHONE (
    PersonID INT REFERENCES PERSON(PersonID) ON DELETE CASCADE,
    PhoneID INT REFERENCES PHONE(PhoneID) ON DELETE CASCADE,
    PRIMARY KEY (PersonID, PhoneID)
);

CREATE TABLE EMAIL (
    EmailID SERIAL PRIMARY KEY,
    EmailAddress VARCHAR(255) UNIQUE
);

CREATE TABLE PERSON_EMAIL (
    PersonID INT REFERENCES PERSON(PersonID) ON DELETE CASCADE,
    EmailID INT REFERENCES EMAIL(EmailID) ON DELETE CASCADE,
    PRIMARY KEY (PersonID, EmailID)
);

/* STUDENT, INSTRUCTOR, and CONTACT_PERSON */
CREATE TABLE STUDENT (
    StudentID SERIAL PRIMARY KEY,
    PersonID INT REFERENCES PERSON(PersonID) ON DELETE CASCADE,
    EnrollmentDate DATE,
    GradeLevel VARCHAR(50)
);

CREATE TABLE INSTRUCTOR (
    InstructorID SERIAL PRIMARY KEY,
    PersonID INT REFERENCES PERSON(PersonID) ON DELETE CASCADE,
    HireDate DATE,
    Specialization VARCHAR(100),
    Salary DECIMAL(10, 2)
);

CREATE TABLE CONTACT_PERSON (
    ContactPersonID SERIAL PRIMARY KEY,
    PersonID INT REFERENCES PERSON(PersonID) ON DELETE CASCADE,
    RelationshipToStudent VARCHAR(100) NOT NULL
);

/* STUDENT-RELATED RELATIONSHIPS */
CREATE TABLE STUDENT_CONTACT_PERSON (
    StudentID INT REFERENCES STUDENT(StudentID) ON DELETE CASCADE,
    ContactPersonID INT REFERENCES CONTACT_PERSON(ContactPersonID) ON DELETE CASCADE,
    RelationshipType VARCHAR(100),
    PRIMARY KEY (StudentID, ContactPersonID)
);

CREATE TABLE SIBLING (
    StudentID1 INT REFERENCES STUDENT(StudentID) ON DELETE CASCADE,
    StudentID2 INT REFERENCES STUDENT(StudentID) ON DELETE CASCADE,
    PRIMARY KEY (StudentID1, StudentID2)
);

/* LESSON and Specialized Types */
CREATE TABLE LESSON (
    LessonID SERIAL PRIMARY KEY,
    LevelID INT,
    InstructorID INT REFERENCES INSTRUCTOR(InstructorID) ON DELETE CASCADE,
    PricingSchemeID INT REFERENCES PRICING_SCHEME(PricingSchemeID) ON DELETE CASCADE
);

CREATE TABLE INDIVIDUAL_LESSON (
    LessonID INT PRIMARY KEY REFERENCES LESSON(LessonID) ON DELETE CASCADE,
    AppointmentTime TIME
);

CREATE TABLE GROUP_LESSON (
    LessonID INT PRIMARY KEY REFERENCES LESSON(LessonID) ON DELETE CASCADE,
    MaxStudents INT,
    MinStudents INT
);

CREATE TABLE ENSEMBLE_LESSON (
    LessonID INT PRIMARY KEY REFERENCES LESSON(LessonID) ON DELETE CASCADE,
    TargetGenre VARCHAR(100),
    MaxStudents INT,
    MinStudents INT
);

/* PRICING SCHEME */
CREATE TABLE PRICING_SCHEME (
    PricingSchemeID SERIAL PRIMARY KEY,
    LessonType VARCHAR(50),
    PricePerLesson DECIMAL(10, 2),
    MinStudents INT,
    MaxStudents INT,
    TargetGenre VARCHAR(100),
    EffectiveFrom DATE,
    EffectiveTo DATE
);

/* LESSON INSTRUMENT RELATIONSHIP */
CREATE TABLE LESSON_INSTRUMENT (
    LessonInstrumentID SERIAL PRIMARY KEY,
    LessonID INT REFERENCES LESSON(LessonID) ON DELETE CASCADE,
    InstrumentID INT REFERENCES INSTRUMENT(InstrumentID) ON DELETE CASCADE
);

/* TRANSACTIONS */
CREATE TABLE BOOKING (
    BookingID SERIAL PRIMARY KEY,
    StudentID INT REFERENCES STUDENT(StudentID) ON DELETE CASCADE,
    LessonID INT REFERENCES LESSON(LessonID) ON DELETE CASCADE,
    LessonType VARCHAR(50),
    BookingDate DATE NOT NULL,
    ScheduledDateTime TIMESTAMP,
    Duration INT,
    Status VARCHAR(50) NOT NULL
);

CREATE TABLE STUDENT_PAYMENT (
    PaymentID SERIAL PRIMARY KEY,
    StudentID INT REFERENCES STUDENT(StudentID) ON DELETE CASCADE,
    PaymentDate DATE NOT NULL,
    Amount DECIMAL(10, 2) NOT NULL,
    PaymentPeriod VARCHAR(50),
    Discount DECIMAL(5, 2)
);

CREATE TABLE INSTRUCTOR_PAYMENT (
    PaymentID SERIAL PRIMARY KEY,
    InstructorID INT REFERENCES INSTRUCTOR(InstructorID) ON DELETE CASCADE,
    PaymentDate DATE NOT NULL,
    Amount DECIMAL(10, 2) NOT NULL,
    PaymentPeriod VARCHAR(50),
    TaxWithheld DECIMAL(5, 2),
    Bonus DECIMAL(10, 2)
);

/* RENTALS */
CREATE TABLE RENTAL (
    RentalID SERIAL PRIMARY KEY,
    StudentID INT REFERENCES STUDENT(StudentID) ON DELETE CASCADE,
    InstrumentID INT REFERENCES INSTRUMENT(InstrumentID) ON DELETE CASCADE,
    RentalStartDate DATE NOT NULL,
    RentalEndDate DATE,
    MonthlyFee DECIMAL(10, 2) NOT NULL,
    Deposit DECIMAL(10, 2)
);

CREATE TABLE INSTRUMENT (
    InstrumentID SERIAL PRIMARY KEY,
    InstrumentName VARCHAR(100) NOT NULL,
    Brand VARCHAR(100),
    InstrumentType VARCHAR(50) NOT NULL,
    QuantityInStock INT,
    RentalPricePerMonth DECIMAL(10, 2) NOT NULL
);

